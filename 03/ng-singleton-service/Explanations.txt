Creating a singleton service using providedIn

In this recipe, you'll learn several tips on how to ensure your Angular service is being used
as a singleton. This means that there will only be one instance of your service in the entire 
application. Here, we'll use a couple of techniques, including the providedIn: 'root'
statement and making sure we only provide the service once in the entire app by using the 
@Optional() and @SkipSelf() decorators. 

How it works

Whenever we try to inject a service somewhere, by default, it tries to find a service inside 
the associated module of where you're injecting the service. When we use providedIn: 
'root' to declare a service, whenever the service is injected anywhere in the app, 
Angular knows that it simply has to find the service definition in the root module and not 
in the feature modules or anywhere else. 
However, you have to make sure that the service is only provided once in the entire 
application. If you provide it in multiple modules, then even with providedIn: 
'root', you'll have multiple instances of the service. To avoid providing a service 
in multiple modules or at multiple places in the app, we can use the @SkipSelf()
decorator with the @Optional() decorator in the services' constructor to check whether 
the service has already been provided in the app.