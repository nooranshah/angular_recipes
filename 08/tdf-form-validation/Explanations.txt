Form validation with template-driven forms


A great user experience is key to acquiring more users that love to use your applications. 
And using forms is one of those things that users don't really enjoy. To make sure that 
users spend the least amount of time filling in forms and are done with them faster, 
we can implement form validation to make sure that users enter the appropriate data 
a.s.a.p. In this recipe, we're going to look at how we can implement form validation in 
template-driven forms.

How it works…


The core components of this recipe were the ngForm and ngModel directives. We could 
easily identify whether the submit button should be clickable (not disabled) or not based 
on whether the form is valid, that is, if all the inputs in the form have valid values. Note 
that we used the template variable created using the #releaseForm="ngForm" syntax 
on the <form> element. This is possible due to the ability of the ngForm directive to be 
exported into a template variable. Therefore, we were able to use the releaseForm.
invalid property in the [disabled] binding of the submit button to conditionally 
disable it. We also showed the errors on individual inputs based on the condition that the 
input might be invalid. In this case, we show the Bootstrap alert element ( a <div>
with the CSS class alert). We also use Angular's provided classes, ng-valid and 
ng-invalid, on the form inputs to highlight the input in a certain way depending on 
the validity of the input's value. What's interesting about this recipe is that we validated 
the app name's input by making sure it contains a non-falsy value where the first 
<option> of the <select> box has the value "". And what's even more fun is that 
we also validated the version name right when the user types it using the [pattern]
binding on the input to a regex. Otherwise, we'd have to wait for the user to submit the 
form, and then it would have been validated. Thus, we're providing a great user experience 
by providing the errors as the user types the version.


See also
• Show and hide validation error messages (Angular Docs): https://angular.
io/guide/forms#show-and-hide-validation-error-messages
• NgForm docs: https://angular.io/api/forms/NgForm
