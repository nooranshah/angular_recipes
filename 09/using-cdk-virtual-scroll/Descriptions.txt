Using Virtual Scroll for huge lists

How it works…

he Angular CDK provides the Scrolling APIs, which include the *cdkVirtualFor
directive and the <cdk-virtual-scroll-viewport> element. It is necessary 
to have <cdk-virtual-scroll-viewport> wrapping the element that has the 
*cdkVirtualFor directive being applied to it. Notice that we have an attribute on the 
cdk-virtual-scroll-viewport element named [itemSize], having its value 
set to "110". The reason for this is that each list item has a height of approximately 110 
pixels, as shown in the following screenshot:

But how does it improve the rendering performance? Glad you asked! In the original code 
for this recipe, when we loaded the 10,000 users, it would create a separate <div> element 
with the class="list__item list-group-item" attribute for each user, thus 
creating 10,000 DOM elements all being rendered at once. With virtual scroll in place, the 
CDK only creates a few <div> elements, renders them, and just replaces the content of 
those few <div> elements as we scroll through items.

For our example, it creates exactly nine <div> elements, as shown in the following 
screenshot:
Since we only have a few elements rendered on the DOM, we don't have performance 
issues anymore, and the hover animation also seems super-smooth now.
Tip
When implementing virtual scroll in your own applications, make sure that 
you set a specific height to the <cdk-virtual-scroll viewport>
element, and also set the [itemSize] attribute equal to the expected listitem height in pixels, otherwise the list won't show.
See also
• CDK scrolling examples (https://material.angular.io/cdk/
scrolling/examples